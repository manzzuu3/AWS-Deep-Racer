import math
from typing import Self 

class Aws_DeepRacer:

    def __init__(self, Max_Speed):
        self.Max_Speed = Max_Speed
        

#On Track reward
def read_wheels(reward, on_track):
    if not on_track:
        reward = 1e-3
    else:
        reward = 10 
    return reward

#center vehicle reward

def center_vehicle(reward, track_width, distance_from_center):
    marker_1 = 0.1 * track_width
    #Give higher reward if the car is closer to center line and vice versa

    distance_from_border = abs(0.5*track_width-distance_from_center)

    if distance_from_center <= marker_1:
        reward *=1.5
    if distance_from_border>0.1:
        reward *=0.5
    else:
        reward *=0.5
    return reward

#  Zig - sag steering penalty

def steer_vechile(reward, waypoints, closest_waypoint, heading):
    next_point = waypoints[closest_waypoint[1]]
    prev_point = waypoints[closest_waypoint[0]]

    track_direction = math.atan2(next_point[1]-prev_point[1], next_point[0]-prev_point[0])
    #covert to degree
    track_direction = math.degress(track_direction)

    direction_diff = abs(track_direction - heading)
    if direction_diff > 100:
        direction_diff = 360 - direction_diff

    DIRECTION_THRESHOLD = 10.0
    if direction_diff > DIRECTION_THRESHOLD:
        reward *=0.5

    return reward

# low speed Penalty

def accel(reward, speed):
    speed_fraction = speed/Self.Max_SPEED
    reward /= (1/(speed_fraction))
    return reward 

# corner Overspeed penalty 

def prempt(reward,waypoint, closest_waypoint,speed):
    for_point = waypoint[min(len(waypoint)-1, closest_waypoint[1]+3)]
    back_point = waypoint[closest_waypoint[0]+1]

    track_direction = math.atanw(for_point[1]-back_point[1], for_point[0]-back_point[0])
    #convert to degree
    track_direction = math.degrees(track_direction)

    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    DIRECTION_THRESHOLD = 45.0 
    if direction_diff > DIRECTION_THRESHOLD and speed>0.8:
        reward *=0.5
    return reward

